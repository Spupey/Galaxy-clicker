// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let energy = 0;
let level = 1;
let currentEnemyHealth = 100;
let maxEnemyHealth = 100;
let clickDamage = 1;
let enemyDefeated = 0;
let criticalChance = 0.1; // 10% —à–∞–Ω—Å –∫—Ä–∏—Ç–∞

// –û—Ä—É–∂–∏–µ
const weapons = [
    { id: 1, name: "–õ–∞–∑–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç", damage: 1, cost: 50, img: "üî´", owned: false },
    { id: 2, name: "–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –ø—É—à–∫–∞", damage: 5, cost: 200, img: "üí•", owned: false },
    { id: 3, name: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –º–µ—á", damage: 10, cost: 500, img: "‚öîÔ∏è", owned: false },
    { id: 4, name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –±–æ–º–±–∞", damage: 20, cost: 1000, img: "üí£", owned: false },
];

// –ù–∞–≤—ã–∫–∏
const skills = [
    { id: 1, name: "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏", description: "+1 —É—Ä–æ–Ω –∑–∞ –∫–ª–∏–∫", cost: 100, unlocked: false },
    { id: 2, name: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä", description: "–®–∞–Ω—Å 10% –Ω–∞ 2x —É—Ä–æ–Ω", cost: 200, unlocked: false },
    { id: 3, name: "–ê–≤—Ç–æ-—Å—Ç—Ä–µ–ª—å–±–∞", description: "1 —É—Ä–æ–Ω –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É", cost: 300, unlocked: false },
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const energyElement = document.getElementById('energy');
const levelElement = document.getElementById('level');
const healthElement = document.getElementById('health');
const enemyImg = document.getElementById('enemy-img');
const clickArea = document.getElementById('click-area');
const weaponsContainer = document.getElementById('weapons');
const skillTreeContainer = document.getElementById('skill-tree');

// –ö–ª–∏–∫ –ø–æ –≤—Ä–∞–≥—É
clickArea.addEventListener('click', (e) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç
    const isCritical = Math.random() < criticalChance;
    let damage = clickDamage;
    
    if (isCritical) {
        damage *= 2;
        showCriticalText(e.clientX, e.clientY);
    }
    
    // –£—Ä–æ–Ω –≤—Ä–∞–≥—É
    currentEnemyHealth -= damage;
    updateEnemyHealth();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞
    enemyImg.style.animation = 'none';
    void enemyImg.offsetWidth;
    enemyImg.style.animation = 'hit 0.3s';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
    createParticles(e.clientX, e.clientY, isCritical);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
    if (currentEnemyHealth <= 0) {
        defeatEnemy();
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–∞
function showCriticalText(x, y) {
    const critText = document.createElement('div');
    critText.className = 'critical';
    critText.textContent = 'CRIT!';
    critText.style.left = `${x}px`;
    critText.style.top = `${y - 50}px`;
    document.body.appendChild(critText);
    
    setTimeout(() => {
        critText.remove();
    }, 500);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
function createParticles(x, y, isCritical) {
    const colors = isCritical 
        ? ['gold', 'orange', 'red'] 
        : ['#ff5555', '#55ff55', '#5555ff', '#ffff55'];
    
    for (let i = 0; i < (isCritical ? 16 : 8); i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = `${x}px`;
        particle.style.top = `${y}px`;
        particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        particle.style.width = isCritical ? '8px' : '6px';
        particle.style.height = isCritical ? '8px' : '6px';
        document.body.appendChild(particle);
        
        const angle = Math.random() * Math.PI * 2;
        const speed = isCritical ? 4 + Math.random() * 4 : 2 + Math.random() * 3;
        let posX = x;
        let posY = y;
        
        const moveParticle = setInterval(() => {
            posX += Math.cos(angle) * speed;
            posY += Math.sin(angle) * speed;
            particle.style.left = `${posX}px`;
            particle.style.top = `${posY}px`;
            particle.style.opacity -= 0.02;
            
            if (parseFloat(particle.style.opacity) <= 0) {
                clearInterval(moveParticle);
                particle.remove();
            }
        }, 16);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞
function updateEnemyHealth() {
    const healthPercent = (currentEnemyHealth / maxEnemyHealth) * 100;
    healthElement.style.width = `${healthPercent}%`;
    
    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
    const hue = (healthPercent * 1.2).toString(10);
    healthElement.style.background = `linear-gradient(90deg, hsl(${hue}, 100%, 50%), hsl(${hue}, 100%, 70%)`;
}

// –ü–æ–±–µ–¥–∞ –Ω–∞–¥ –≤—Ä–∞–≥–æ–º
function defeatEnemy() {
    energy += maxEnemyHealth / 10;
    enemyDefeated++;
    updateStats();
    
    // –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
    createExplosion();
    
    // –ù–æ–≤—ã–π –≤—Ä–∞–≥
    spawnNewEnemy();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
    if (enemyDefeated >= 5) {
        levelUp();
    }
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
function createExplosion() {
    for (let i = 0; i < 30; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        const rect = enemyImg.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        particle.style.left = `${centerX}px`;
        particle.style.top = `${centerY}px`;
        particle.style.backgroundColor = `hsl(${Math.random() * 60}, 100%, 50%)`;
        particle.style.width = '10px';
        particle.style.height = '10px';
        document.body.appendChild(particle);
        
        const angle = Math.random() * Math.PI * 2;
        const speed = 3 + Math.random() * 5;
        let posX = centerX;
        let posY = centerY;
        
        const moveParticle = setInterval(() => {
            posX += Math.cos(angle) * speed;
            posY += Math.sin(angle) * speed;
            particle.style.left = `${posX}px`;
            particle.style.top = `${posY}px`;
            particle.style.opacity -= 0.02;
            
            if (parseFloat(particle.style.opacity) <= 0) {
                clearInterval(moveParticle);
                particle.remove();
            }
        }, 16);
    }
}

// –°–ø–∞–≤–Ω –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
function spawnNewEnemy() {
    currentEnemyHealth = maxEnemyHealth = 100 + (level * 20);
    updateEnemyHealth();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    enemyImg.style.transform = 'scale(0)';
    enemyImg.style.opacity = '0';
    setTimeout(() => {
        enemyImg.style.transition = 'all 0.5s';
        enemyImg.style.transform = 'scale(1)';
        enemyImg.style.opacity = '1';
        
        // –°–ª—É—á–∞–π–Ω—ã–π –≤—Ä–∞–≥
        const enemies = [
            'https://i.imgur.com/JqYeYnW.png',
            'https://i.imgur.com/8Q6QyZR.png',
            'https://i.imgur.com/4T3W9jK.png'
        ];
        enemyImg.src = enemies[Math.floor(Math.random() * enemies.length)];
    }, 300);
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function levelUp() {
    level++;
    enemyDefeated = 0;
    levelElement.textContent = level;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
    levelElement.style.transform = 'scale(1.5)';
    setTimeout(() => {
        levelElement.style.transform = 'scale(1)';
    }, 500);
    
    unlockNewWeapons();
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è
function unlockNewWeapons() {
    weaponsContainer.innerHTML = '';
    weapons.forEach((weapon, index) => {
        if (weapon.owned || weapon.cost > energy) return;
        const weaponElement = document.createElement('div');
        weaponElement.className = 'weapon';
        weaponElement.style.setProperty('--order', index);
        weaponElement.innerHTML = `
            <div style="font-size: 2rem;">${weapon.img}</div>
            <h3>${weapon.name}</h3>
            <p>–£—Ä–æ–Ω: +${weapon.damage}</p>
            <p>–¶–µ–Ω–∞: ${weapon.cost} —ç–Ω–µ—Ä–≥–∏–∏</p>
        `;
        weaponElement.addEventListener('click', () => {
            if (energy >= weapon.cost) {
                energy -= weapon.cost;
                weapon.owned = true;
                clickDamage += weapon.damage;
                updateStats();
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
                weaponElement.style.borderColor = '#00ff00';
                weaponElement.style.animation = 'none';
                void weaponElement.offsetWidth;
                weaponElement.style.animation = 'fadeIn 0.5s';
            }
        });
        weaponsContainer.appendChild(weaponElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    energyElement.textContent = Math.floor(energy);
    energyElement.style.fontSize = '1.5em';
    setTimeout(() => {
        energyElement.style.fontSize = '1em';
    }, 300);
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä
setInterval(() => {
    if (skills[2].unlocked) {
        currentEnemyHealth -= 1;
        updateEnemyHealth();
        
        if (currentEnemyHealth <= 0) {
            defeatEnemy();
        }
    }
}, 1000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    updateStats();
    unlockNewWeapons();
    spawnNewEnemy();
}

initGame();
